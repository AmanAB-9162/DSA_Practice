// class Solution {
// public:
//     int minimumDeletions(string word, int k) {
//         int n = word.size();
        
//         vector<int>mp(26,0);
//         vector<int>ans;
//         for(auto words : word){
//             mp[words-'a']++;
//         }
//         for(int i = 0;i<26;i++){
//              if(mp[i] > 0)ans.push_back(mp[i]);
//         }
//         int value = INT_MAX;

//         sort(ans.begin(),ans.end());
//         for(int i = 0;i<ans.size();i++){
//         int count  = 0;
//         int b = ans[i];
//         for(int j = 0;j<ans.size();j++){
//             if(ans[j] < b)count+=ans[j];

//             else if(ans[j] > b + k)count+=ans[j] - (b+k);
//         }
//         value = min(value,count);
//         }
//         return value;

//     }
// };


class Solution {
public:
    int minimumDeletions(string word, int k) {
        unordered_map<char, int> freqMap;
        for (char c : word) {
            freqMap[c]++;
        }
        
        vector<int> frequencies;
        for (auto& pair : freqMap) {
            frequencies.push_back(pair.second);
        }
        sort(frequencies.begin(), frequencies.end());
        
        int minDeletions = INT_MAX;
        int n = frequencies.size();
        
        for (int i = 0; i < n; ++i) {
            int base = frequencies[i];
            int totalDeletions = 0;
            
            for (int j = 0; j < i; ++j) {
                totalDeletions += frequencies[j];
            }
            
            for (int j = i; j < n; ++j) {
                if (frequencies[j] > base + k) {
                    totalDeletions += frequencies[j] - (base + k);
                }
            }
            
            if (totalDeletions < minDeletions) {
                minDeletions = totalDeletions;
            }
        }
        
        return minDeletions;
    }
};
